from fastapi import FastAPI, Request, Depends
from fastapi.templating import Jinja2Templates
from fastapi.staticfiles import StaticFiles
from sqlalchemy.orm import Session
from models import Part, Figure
from fastapi import Form
from fastapi.responses import RedirectResponse
from database import SessionLocal, engine
from models import Base
import crud
from fastapi import Body
from starlette.middleware.sessions import SessionMiddleware
from models import User
from models import Part, Figure, User, UserFigure


app = FastAPI(title="DragonCollect", description="–§—ñ–≥—É—Ä–∫–∏ –∑ –º—É–ª—å—Ç—Ñ—ñ–ª—å–º—É", version="1.0")
app.add_middleware(SessionMiddleware, secret_key="very-secret-key")

# —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å
Base.metadata.create_all(bind=engine)

# —à–∞–±–ª–æ–Ω–∏ + —Å—Ç–∞—Ç–∏–∫–∞
templates = Jinja2Templates(directory="templates")
app.mount("/static", StaticFiles(directory="static"), name="static")



# —Å–µ—Å—ñ—è –¥–æ –ë–î
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()



@app.on_event("startup")
def add_default_parts():
    """
    üõ†Ô∏è –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —á–∞—Å—Ç–∏–Ω —Ñ—ñ–ª—å–º—É –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–∞–ø—É—Å–∫—É –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É.

    –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–≤–æ—Ä—é—î —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ —á–∞—Å—Ç–∏–Ω–∏ ("–§—ñ–ª—å–º 1", "–ß–∞—Å—Ç–∏–Ω–∞ 1", "–ß–∞—Å—Ç–∏–Ω–∞ 2", "–ß–∞—Å—Ç–∏–Ω–∞ 3"),
    —è–∫—â–æ —Ç–∞–±–ª–∏—Ü—è parts —â–µ –ø–æ—Ä–æ–∂–Ω—è.
    """
    db = SessionLocal()
    if db.query(Part).count() == 0:
        db.add_all([
            Part(title="–§—ñ–ª—å–º 1"),
            Part(title="–ß–∞—Å—Ç–∏–Ω–∞ 1"),
            Part(title="–ß–∞—Å—Ç–∏–Ω–∞ 2"),
            Part(title="–ß–∞—Å—Ç–∏–Ω–∞ 3")
        ])
        db.commit()
    db.close()




@app.post(
    "/toggle_owned/{figure_id}",
    summary="–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –≤–æ–ª–æ–¥—ñ–Ω–Ω—è —Ñ—ñ–≥—É—Ä–∫–æ—é",
    description="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç–∞–≤–∏—Ç—å –∞–±–æ –∑–Ω—ñ–º–∞—î –ø–æ–∑–Ω–∞—á–∫—É '–º–∞—é/–Ω–µ –º–∞—é' –¥–ª—è —Ñ—ñ–≥—É—Ä–∫–∏. "
                "–¶—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–æ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."
)
def toggle_owned(
    figure_id: int,
    request: Request,
    payload: dict = Body(...),
    db: Session = Depends(get_db)
):
    user_data = request.session.get("user")
    if not user_data:
        return {"success": False, "error": "Unauthorized"}

    user = db.query(User).filter(User.username == user_data["username"]).first()
    if not user:
        return {"success": False, "error": "User not found"}

    owned = payload.get("owned", False)

    user_fig = db.query(UserFigure).filter_by(user_id=user.id, figure_id=figure_id).first()
    if user_fig:
        user_fig.owned = owned
    else:
        user_fig = UserFigure(user_id=user.id, figure_id=figure_id, owned=owned)
        db.add(user_fig)

    db.commit()
    return {"success": True, "owned": owned}




@app.get(
    "/",
    summary="–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –∫–∞—Ç–∞–ª–æ–≥—É",
    description="–ü–æ–∫–∞–∑—É—î —Ñ—ñ–≥—É—Ä–∫–∏ –∑ —á–∞—Å—Ç–∏–Ω–∏ '–§—ñ–ª—å–º 1' —Ç–∞ –ø–æ–∑–Ω–∞—á–∫–∏ '–º–∞—é/–Ω–µ –º–∞—é' –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."
)
def read_root(request: Request, db: Session = Depends(get_db)):
    part = db.query(Part).filter(Part.title == "–§—ñ–ª—å–º 1").first()
    if not part:
        return templates.TemplateResponse("index.html", {"request": request, "figures": []})

    figures = db.query(Figure).filter(Figure.part_id == part.id).all()

    user_data = request.session.get("user")
    owned_map = {}

    if user_data:
        user = db.query(User).filter_by(username=user_data["username"]).first()
        if user:
            user_figs = db.query(UserFigure).filter_by(user_id=user.id).all()
            owned_map = {uf.figure_id: uf.owned for uf in user_figs}

    return templates.TemplateResponse("index.html", {
        "request": request,
        "figures": figures,
        "owned_map": owned_map
    })



@app.post(
    "/create",
    summary="–î–æ–¥–∞—Ç–∏ –Ω–æ–≤—É —Ñ—ñ–≥—É—Ä–∫—É",
    description="–¶–µ–π –º–∞—Ä—à—Ä—É—Ç –¥–æ–∑–≤–æ–ª—è—î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É —Ñ—ñ–≥—É—Ä–∫—É –∑ –Ω–∞–∑–≤–æ—é, –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º, –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–º –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–Ω—ñ —Ç–∞ –≤–∫–∞–∑–∞—Ç–∏, –¥–æ —è–∫–æ—ó —á–∞—Å—Ç–∏–Ω–∏ —Ñ—ñ–ª—å–º—É –≤–æ–Ω–∞ –Ω–∞–ª–µ–∂–∏—Ç—å."
)
def create_figure(
    request: Request,
    name: str = Form(...),
    img_url: str = Form(...),
    hover_img_url: str = Form(...),
    part_id: int = Form(...),
    owned: bool = Form(False),
    db: Session = Depends(get_db)
):
    if not request.session.get("user", {}).get("is_admin", False):
        return RedirectResponse(url="/", status_code=302)
    
    new_figure = Figure(
        name=name,
        img_url=img_url,
        hover_img_url=hover_img_url,
        part_id=part_id,
        owned=owned
    )
    db.add(new_figure)
    db.commit()
    return RedirectResponse(url="/", status_code=302)



@app.get("/ping")
def ping():
    return {"message": "pong"}


@app.get(
    "/edit/{id}",
    summary="–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ñ—ñ–≥—É—Ä–∫—É",
    description="–î–æ—Å—Ç—É–ø–Ω–æ –ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Å—Ç–æ—Ä—ñ–Ω–∫—É –∑ —Ñ–æ—Ä–º–æ—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ñ—ñ–≥—É—Ä–∫–∏ –∑–∞ —ó—ó ID."
)
def edit_figure(id: int, request: Request, db: Session = Depends(get_db)):
    if not request.session.get("user", {}).get("is_admin", False):
        return RedirectResponse(url="/", status_code=302)
    
    figure = db.query(Figure).filter(Figure.id == id).first()
    parts = db.query(Part).all()
    if not figure:
        return RedirectResponse(url="/", status_code=302)
    return templates.TemplateResponse("edit_figure.html", {
        "request": request,
        "figure": figure,
        "parts": parts
    })



@app.post(
    "/delete/{id}",
    summary="–í–∏–¥–∞–ª–∏—Ç–∏ —Ñ—ñ–≥—É—Ä–∫—É",
    description="–í–∏–¥–∞–ª—è—î —Ñ—ñ–≥—É—Ä–∫—É –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–º ID. –î–æ—Å—Ç—É–ø–Ω–æ –ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
)
def delete_figure(id: int, db: Session = Depends(get_db)):
    if not request.session.get("user", {}).get("is_admin", False):
         return RedirectResponse(url="/", status_code=302)

    figure = db.query(Figure).filter(Figure.id == id).first()
    if figure:
        db.delete(figure)
        db.commit()
    return RedirectResponse(url="/", status_code=302)



@app.post(
    "/toggle_owned/{figure_id}",
    summary="–ü–µ—Ä–µ–º–∫–Ω—É—Ç–∏ —Å—Ç–∞–Ω —Ñ—ñ–≥—É—Ä–∫–∏",
    description="–ó–º—ñ–Ω—é—î —Å—Ç–∞–Ω '–º–∞—é / –Ω–µ –º–∞—é' –¥–ª—è —Ñ—ñ–≥—É—Ä–∫–∏. –£ —Ü—å–æ–º—É –≤–∞—Ä—ñ–∞–Ω—Ç—ñ –∑–º—ñ–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–∞ (–Ω–µ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞)."
)
def toggle_owned(figure_id: int, db: Session = Depends(get_db)):
    figure = db.query(Figure).filter(Figure.id == figure_id).first()
    if not figure:
        return {"success": False}
    figure.owned = not figure.owned
    db.commit()
    return {"success": True, "owned": figure.owned}



@app.post(
    "/toggle_owned/{figure_id}",
    summary="–ó–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞–Ω —Ñ—ñ–≥—É—Ä–∫–∏",
    description="–û–Ω–æ–≤–ª—é—î –ø–æ–ª–µ 'owned' —Ñ—ñ–≥—É—Ä–∫–∏ –¥–ª—è –∑–∞–¥–∞–Ω–æ–≥–æ ID. –£–≤–∞–≥–∞: –∑–º—ñ–Ω—é—î –≥–ª–æ–±–∞–ª—å–Ω–æ, –∞ –Ω–µ –¥–ª—è –æ–∫—Ä–µ–º–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞!"
)
def toggle_owned(figure_id: int, payload: dict = Body(...), db: Session = Depends(get_db)):
    figure = db.query(Figure).filter(Figure.id == figure_id).first()
    if not figure:
        return {"success": False}
    figure.owned = payload.get("owned", False)
    db.commit()
    return {"success": True, "owned": figure.owned}



@app.get(
    "/create_admin",
    summary="–°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
    description="–Ø–∫—â–æ –≤ —Å–∏—Å—Ç–µ–º—ñ —â–µ –Ω–µ–º–∞—î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —Å—Ç–≤–æ—Ä—é—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ª–æ–≥—ñ–Ω–æ–º 'admin' —ñ –ø–∞—Ä–æ–ª–µ–º 'admin123'."
)
def create_admin(db: Session = Depends(get_db)):
    from models import User

    existing_admin = db.query(User).filter(User.is_admin == True).first()
    if existing_admin:
        return {"message": "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —ñ—Å–Ω—É—î"}

    admin = User(username="admin", password="admin123", is_admin=True)
    db.add(admin)
    db.commit()
    return {"message": "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å—Ç–≤–æ—Ä–µ–Ω–æ"}



@app.get(
    "/login",
    summary="–§–æ—Ä–º–∞ –≤—Ö–æ–¥—É",
    description="–ü–æ–≤–µ—Ä—Ç–∞—î HTML-—Å—Ç–æ—Ä—ñ–Ω–∫—É –∑ —Ñ–æ—Ä–º–æ—é –≤—Ö–æ–¥—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
)
def login_form(request: Request):
    return templates.TemplateResponse("login.html", {"request": request})


@app.post(
    "/login",
    summary="–£–≤—ñ–π—Ç–∏",
    description="–ü–µ—Ä–µ–≤—ñ—Ä—è—î –ª–æ–≥—ñ–Ω —ñ –ø–∞—Ä–æ–ª—å, –∑–±–µ—Ä—ñ–≥–∞—î —Å—Ç–∞—Ç—É—Å —É —Å–µ—Å—ñ—ó. –ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü—ñ—è –Ω–∞ –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É –ø—ñ—Å–ª—è —É—Å–ø—ñ—Ö—É."
)
def login_user(
    request: Request,
    username: str = Form(...),
    password: str = Form(...),
    db: Session = Depends(get_db)
):
    user = db.query(User).filter_by(username=username, password=password).first()
    if not user:
        return templates.TemplateResponse("login.html", {
            "request": request,
            "error": "–ù–µ–≤—ñ—Ä–Ω—ñ –¥–∞–Ω—ñ"
        })
    
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —É —Å–µ—Å—ñ—é
    request.session["user"] = {
        "username": user.username,
        "is_admin": user.is_admin
    }

    return RedirectResponse(url="/", status_code=302)



@app.get(
    "/logout",
    summary="–í–∏–π—Ç–∏",
    description="–û—á–∏—â–∞—î —Å–µ—Å—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –π–æ–≥–æ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É."
)
def logout(request: Request):
    request.session.clear()
    return RedirectResponse(url="/", status_code=302)




@app.get(
    "/register",
    summary="–§–æ—Ä–º–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó",
    description="–ü–æ–≤–µ—Ä—Ç–∞—î HTML-—Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
)
def register_form(request: Request):
    return templates.TemplateResponse("register.html", {"request": request})




@app.post(
    "/register",
    summary="–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞",
    description="–°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –ø–µ—Ä–µ–≤—ñ—Ä—è—î —É–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å –ª–æ–≥—ñ–Ω—É, –∑–±–µ—Ä—ñ–≥–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —É –ë–î —ñ —Ñ–∞–π–ª."
)
def register_user(
    request: Request,
    username: str = Form(...),
    password: str = Form(...),
    role: str = Form(...),
    db: Session = Depends(get_db)
):
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ
    existing = db.query(User).filter_by(username=username).first()
    if existing:
        return templates.TemplateResponse("register.html", {
            "request": request,
            "error": "–¢–∞–∫–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É–∂–µ —ñ—Å–Ω—É—î"
        })

    new_user = User(
        username=username,
        password=password,
        is_admin=(role == "admin")
    )
    db.add(new_user)
    db.commit()

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤ users.txt
    with open("users.txt", "a", encoding="utf-8") as f:
        f.write(f"{username} | {password} | {'admin' if role == 'admin' else 'user'}\n")

    return RedirectResponse(url="/login", status_code=302)




@app.get(
    "/manage_users",
    summary="–ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏",
    description="–°—Ç–æ—Ä—ñ–Ω–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É. –î–æ–∑–≤–æ–ª—è—î –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —É—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É —Å–∏—Å—Ç–µ–º—ñ."
)
def manage_users(request: Request, db: Session = Depends(get_db)):
    user = request.session.get("user")
    if not user or not user["is_admin"]:
        return RedirectResponse(url="/", status_code=302)

    users = db.query(User).all()
    return templates.TemplateResponse("manage_users.html", {
        "request": request,
        "users": users
    })




@app.post(
    "/delete_user/{user_id}",
    summary="–í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞",
    description="–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –±—É–¥—å-—è–∫–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –∫—Ä—ñ–º —Å–∞–º–æ–≥–æ —Å–µ–±–µ. –ü—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è —Ç–µ–∫—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª –∑—ñ —Å–ø–∏—Å–∫–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤."
)
def delete_user(user_id: int, request: Request, db: Session = Depends(get_db)):
    current_user = request.session.get("user")
    if not current_user or not current_user["is_admin"]:
        return RedirectResponse(url="/", status_code=302)

    user_to_delete = db.query(User).filter(User.id == user_id).first()
    if user_to_delete and user_to_delete.username != current_user["username"]:
        db.delete(user_to_delete)
        db.commit()

    # –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è ‚Äî –æ–Ω–æ–≤–∏—Ç–∏ —Ç–µ–∫—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª
    users = db.query(User).all()
    with open("user_list.txt", "w", encoding="utf-8") as f:
        for u in users:
            f.write(f"{u.username} | {u.password} | {'admin' if u.is_admin else 'user'}\n")

    return RedirectResponse(url="/manage_users", status_code=302)






@app.get(
    "/",
    summary="–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ ‚Äî –§—ñ–ª—å–º 1",
    description="–ü–æ–∫–∞–∑—É—î –≤—Å—ñ —Ñ—ñ–≥—É—Ä–∫–∏, —è–∫—ñ –Ω–∞–ª–µ–∂–∞—Ç—å –¥–æ –ø–µ—Ä—à–æ–≥–æ —Ñ—ñ–ª—å–º—É."
)
def read_root(request: Request, db: Session = Depends(get_db)):
    part = db.query(Part).filter(Part.title == "–§—ñ–ª—å–º 1").first()
    if not part:
        return templates.TemplateResponse("index.html", {"request": request, "figures": []})
    figures = db.query(Figure).filter(Figure.part_id == part.id).all()
    return templates.TemplateResponse("index.html", {"request": request, "figures": figures})



@app.get(
    "/part1",
    summary="–§—ñ–≥—É—Ä–∫–∏ –∑ –ß–∞—Å—Ç–∏–Ω–∏ 1",
    description="–í–∏–≤–æ–¥–∏—Ç—å —Ñ—ñ–≥—É—Ä–∫–∏, —â–æ –Ω–∞–ª–µ–∂–∞—Ç—å –¥–æ –ß–∞—Å—Ç–∏–Ω–∏ 1 –º—É–ª—å—Ç—Ñ—ñ–ª—å–º—É."
)
def part1_page(request: Request, db: Session = Depends(get_db)):
    part = db.query(Part).filter(Part.title == "–ß–∞—Å—Ç–∏–Ω–∞ 1").first()
    if not part:
        return templates.TemplateResponse("part1.html", {"request": request, "figures": []})

    figures = db.query(Figure).filter(Figure.part_id == part.id).all()

    user_data = request.session.get("user")
    owned_map = {}

    if user_data:
        user = db.query(User).filter_by(username=user_data["username"]).first()
        if user:
            user_figs = db.query(UserFigure).filter_by(user_id=user.id).all()
            owned_map = {uf.figure_id: uf.owned for uf in user_figs}

    return templates.TemplateResponse("part1.html", {
        "request": request,
        "figures": figures,
        "owned_map": owned_map
    })



@app.get(
    "/part2",
    summary="–§—ñ–≥—É—Ä–∫–∏ –∑ –ß–∞—Å—Ç–∏–Ω–∏ 2",
    description="–í–∏–≤–æ–¥–∏—Ç—å —Ñ—ñ–≥—É—Ä–∫–∏, —â–æ –Ω–∞–ª–µ–∂–∞—Ç—å –¥–æ –ß–∞—Å—Ç–∏–Ω–∏ 2 –º—É–ª—å—Ç—Ñ—ñ–ª—å–º—É."
)
def part2_page(request: Request, db: Session = Depends(get_db)):
    part = db.query(Part).filter(Part.title == "–ß–∞—Å—Ç–∏–Ω–∞ 2").first()
    if not part:
        return templates.TemplateResponse("part2.html", {"request": request, "figures": []})

    figures = db.query(Figure).filter(Figure.part_id == part.id).all()

    user_data = request.session.get("user")
    owned_map = {}

    if user_data:
        user = db.query(User).filter_by(username=user_data["username"]).first()
        if user:
            user_figs = db.query(UserFigure).filter_by(user_id=user.id).all()
            owned_map = {uf.figure_id: uf.owned for uf in user_figs}

    return templates.TemplateResponse("part2.html", {
        "request": request,
        "figures": figures,
        "owned_map": owned_map
    })




@app.get(
    "/part3",
    summary="–§—ñ–≥—É—Ä–∫–∏ –∑ –ß–∞—Å—Ç–∏–Ω–∏ 3",
    description="–í–∏–≤–æ–¥–∏—Ç—å —Ñ—ñ–≥—É—Ä–∫–∏, —â–æ –Ω–∞–ª–µ–∂–∞—Ç—å –¥–æ –ß–∞—Å—Ç–∏–Ω–∏ 3 –º—É–ª—å—Ç—Ñ—ñ–ª—å–º—É."
)
def part3_page(request: Request, db: Session = Depends(get_db)):
    part = db.query(Part).filter(Part.title == "–ß–∞—Å—Ç–∏–Ω–∞ 3").first()
    if not part:
        return templates.TemplateResponse("part3.html", {"request": request, "figures": []})

    figures = db.query(Figure).filter(Figure.part_id == part.id).all()

    user_data = request.session.get("user")
    owned_map = {}

    if user_data:
        user = db.query(User).filter_by(username=user_data["username"]).first()
        if user:
            user_figs = db.query(UserFigure).filter_by(user_id=user.id).all()
            owned_map = {uf.figure_id: uf.owned for uf in user_figs}

    return templates.TemplateResponse("part3.html", {
        "request": request,
        "figures": figures,
        "owned_map": owned_map
    })




@app.get(
    "/create_form",
    summary="–§–æ—Ä–º–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ—ñ–≥—É—Ä–∫–∏",
    description="–í—ñ–¥–æ–±—Ä–∞–∂–∞—î HTML-—Ñ–æ—Ä–º—É –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó —Ñ—ñ–≥—É—Ä–∫–∏ –∑ –≤–∏–±–æ—Ä–æ–º —á–∞—Å—Ç–∏–Ω–∏ —Ñ—ñ–ª—å–º—É."
)
def show_create_form(request: Request, db: Session = Depends(get_db)):
    parts = db.query(Part).all()
    return templates.TemplateResponse("create_figure.html", {"request": request, "parts": parts})


@app.get(
    "/debug_parts",
    summary="–í–∏–≤—ñ–¥ —á–∞—Å—Ç–∏–Ω (debug)",
    description="–ü–æ–≤–µ—Ä—Ç–∞—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–∞ —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤ —É—Å—ñ—Ö —á–∞—Å—Ç–∏–Ω, —â–æ —î –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –≤—ñ–¥–ª–∞–¥–∫–∏."
)
def debug_parts(db: Session = Depends(get_db)):
    parts = db.query(Part).all()
    return {"count": len(parts), "titles": [p.title for p in parts]}


@app.post(
    "/update/{id}",
    summary="–û–Ω–æ–≤–∏—Ç–∏ —Ñ—ñ–≥—É—Ä–∫—É",
    description="–û–Ω–æ–≤–ª—é—î –¥–∞–Ω—ñ –ø—Ä–æ —Ñ—ñ–≥—É—Ä–∫—É –∑–∞ —ó—ó ID: —ñ–º‚Äô—è, –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, —á–∞—Å—Ç–∏–Ω—É —Ç–∞ —Å—Ç–∞—Ç—É—Å '–º–∞—é/–Ω–µ –º–∞—é'."
)
def update_figure(
    id: int,
    name: str = Form(...),
    img_url: str = Form(...),
    hover_img_url: str = Form(...),
    part_id: int = Form(...),
    owned: bool = Form(False),
    db: Session = Depends(get_db)
):
    figure = db.query(Figure).filter(Figure.id == id).first()
    if figure:
        figure.name = name
        figure.img_url = img_url
        figure.hover_img_url = hover_img_url
        figure.part_id = part_id
        figure.owned = owned
        db.commit()
    return RedirectResponse(url="/", status_code=302)


@app.get(
    "/support.html",
    summary="–°–ª—É–∂–±–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏",
    description="–í—ñ–¥–æ–±—Ä–∞–∂–∞—î HTML-—Å—Ç–æ—Ä—ñ–Ω–∫—É –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –ø—ñ–¥—Ç—Ä–∏–º–∫—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É."
)
def support_page(request: Request):
    return templates.TemplateResponse("support.html", {"request": request})


@app.get(
    "/about.html",
    summary="–ü—Ä–æ –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫",
    description="–°—Ç–æ—Ä—ñ–Ω–∫–∞ –∑ –æ–ø–∏—Å–æ–º –ø—Ä–µ–¥–º–µ—Ç–Ω–æ—ó –≥–∞–ª—É–∑—ñ, —Ü—ñ–ª–µ–π —Ç–∞ –ª–æ–≥—ñ–∫–∏ –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É DragonCollect."
)
def about_page(request: Request):
    return templates.TemplateResponse("about.html", {"request": request})